To compile

# ./configure
# make
# make install

To use it

In a modular setting:
# lustrec <filename.lus>
will generate filename.c and filename.h

With a main node:
# lustrec -node <main_node> <filename.lus>
will generate the same two files, but filename.c will contains a main function

With a main node, with a static memory allocation scheme:
# lustrec -node <main_node> -static <filename.lus>
same as above, but main function will statically allocate memory

To compile it:
# gcc -Iinclude filename.c
where include links to the include folder

To run it with the generated main function:
- compile the io_frontend.o
# gcc -c include/io_frontend.c
# gcc -Iinclude -o target_name io_frontend.c filename.c
# ./target_name

To analyze it with frama-c
# frama-c -cpp-extra-args='-Iinclude'  filename.c
