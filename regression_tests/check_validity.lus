
node check_validity (x: bool; n: int) returns (y: bool; nb_times: int);
var
compt: int;
let
  compt = (if x then 1 else 0) -> if x then pre compt + 1 else 0;
  y = (compt >= n);
  nb_times= (if x then 1 else 0) -> 
    if x then pre nb_times + 1 else 
      (if pre nb_times > 0 then pre nb_times - 1 else 0);
tel


node lock (x, reset: bool) returns (y: bool);
let
y = x -> if reset then x else x or pre y;
tel


node check_validity_lock (x: bool; n: int) returns (y: bool);
var
  nb_times: int;
  er: bool;
let
	(er, nb_times) = check_validity(x, n);
	y = x or lock(er, (nb_times = 0));
tel

node top (x: bool; n: int) returns (ok: bool);
let
 ok = x => check_validity_lock(x, n);
 --!PROPERTY: ok;
 --!MAIN: true;
tel